}
#df.save <- as.data.frame(t(r.frame))  # transpose frame from columns of data to rows of data
#add column names
#colnames(df.save) <- c("OriginalLocationID","LocationID","Datetime",toString(t.label))
#df.save <- subset(df.save, select = -c(drop))  # remove the filler column (was a row) we needed to add above
# create a results filename, use the direcory name/table name in the file name and label of sample type
#file.name <- paste("Table",t.table.number,"_", toString(t.label), "_mod.csv", sep = "")  # use the direcory name/table name in the file name
# write the results out to a file, from processing one or more files to a single csv file with linear usable data
#write.table(df.save, file = file.name,
#            append = FALSE, quote = TRUE, sep = ",",
#            eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE,
#            qmethod = c("escape", "double"), fileEncoding = "")
}
##MAIN SCRIPT##
## SET Root Working Directory for project:
wd <- "~/Documents/MysticProject/testbed/WQ7981/"
scriptsLoc <- paste(wd,"scripts/", sep = "")
##Establish list of station/Location names and replacements so they can changed, from file
LocationNameChange.File <- paste(scriptsLoc,"LocationChangeData.csv", sep = "")
df.LocationNameChange <- read.table (file = LocationNameChange.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Establish list of Table names and relevant table info from file
Table.NameInfo.File <- paste(scriptsLoc,"TableNamesInfo.csv", sep ="")
df.Table <- read.table (file = Table.NameInfo.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Set Location of Table 2 for writting
Table.2 <- paste(wd,"/TABLE 2/RESULTS.csv", sep ="")
df.t2  <-  read.table (file = Table.2, header = TRUE, sep = ",", skip=0, na.strings = c(""))
RESULTS <- df.t2
#process the tables
for (t.num in 3:3) {   # process a range of tables
table.number <- t.num
label <- df.Table[t.num,2]  #lable of sample type eg. total Coliform etc.
first.file <- df.Table[t.num,3] + 2
number.files <- df.Table[t.num+1,3] - df.Table[t.num,3]
#print(label)
#print(first.file)
#print(number.files)
ProcessOneTable(table.number,
number.files ,
label ,
first.file)
}
## Mystic River Watershed Association
##  WQ7981  - Mystic River Water Quality Data Report 1979, 1980, 1981
## Project to convert data from to a usable format
##  Peter Olsen April, 2015
## This script was used to transpose tables 3 - 33 of the Report
##
require(stringr)
require(lubridate)
#setwd("/Users/Peter/Documents/MysticProject/testbed/DataProjectPDFtoUsableTables/TABLE 3")
rm(list=ls())   # remove all variables in Enviornment
## Function ##
## Requires station(location) name from data and a data frame with replacement station names paired with
## station names from report tables
StationNameChange <- function(st.name,df.stnames){
for (reportRow in 1:nrow(df.stnames)){
if (df.stnames[reportRow,1] == st.name) {
return( df.stnames[reportRow,2])
}
}
stop(paste("missing", st.name))  ## if no match found stops the program
}
writeToResults <- function (f.stationName, f.date, f.data ) {
#logic flaw - l is rewritten each time a value is presented- vector only has one value
#l <- vector(mode="character", length=nrow(df.t2))
for (row in 2:nrow(df.t2)){
#if ((stationNameC == df.t2[row,2])  && (surveyDate == df.t2[row,3])){
if ((f.stationName == df.t2[row,2]) && (toString(mdy(f.date))
== toString(df.t2[row,3]))){
print("BINGO!!!!!")
print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
df.t2[row,8] <- toString(f.data)
#l[row] <-  f.data
return(row)
} else {
#l<- c(l, "NA")
}
#print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
#print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
#stop("toCheck")
}
#print(l)
}
#Fuction to Extact data from one file from a Table
ExtractOneFile <- function (origFile,t.num) {
origData <- read.table (file = origFile, header = FALSE, sep = ",", skip=4, na.strings = c(""))
print(origData)
results.col <- as.integer(1)  # establish a varaible to keep track of columns in results frame
#l <- vector(mode="character", length=nrow(df.t2))
for (table.row in 2:nrow(origData)) {           # assign row  (was 2,37, 4)
for (table.col in 2:ncol(origData)){          # assign collum   ## 8 should be table width ncol(origData) #for (table.col in 2:8){
stationName <- toString(origData[table.row,1])
if ((toString(origData[table.row,table.col]) == "NA")|| (stationName == "NA")) {   # skip lines with no data
next
}
# check if station name is O.K
if (!(grepl("[A-Z]{2,3}[0-9]{2}[A]{0,1}$",stationName))) {
#if (grepl("A",st.name)) {
stop(paste("Bad Station Name: table:",origFile,"value:",stationName))
}
stationNameC <- toString(StationNameChange(stationName, df.LocationNameChange))  #change location/station names
surveyDate <- toString(origData[1,table.col])
#print(paste("date: ",surveyDate,"column:",table.col,"row:",table.row))
surveyData <- toString(origData[table.row,table.col])
if ((stationNameC =="NA") || (surveyDate == "NA") || ( surveyData =="NA")){
next   #skip lines with NA values
}
#write to results table
line.num <- writeToResults(stationNameC, surveyDate, surveyData)
l[line.num] <- surveyData
#print(paste("t2 station",df.t2[row,2], as.Date(df.t2[row,3], format = "%m/%d/%y")))
#print(paste("date: ",surveyDate,
#           mdy(surveyDate),
#            "Station Name:",stationNameC,"data:",surveyData,"row:",row))
}    #end for col
} # end for row
#return(results.frame)
#print(l)
} # end function
##FUNCTION TO PROCESS ONE TABLE##
ProcessOneTable <- function ( t.table.number ,
t.number.files,
t.label,
t.first.file ){
new.dir <- paste(wd,"TABLE ",t.table.number, sep = "")
print(paste(new.dir,"/",t.first.file,".csv",sep=""))
#l <- vector(mode="character", length=nrow(df.t2))
if (file.exists(paste(new.dir,"/",t.first.file,".csv",sep=""))){
setwd(new.dir)
} else {
print("stop")
return()
}
## extract data from all the files in a table directory and combine them into one data frame
for (files.num in 0:(t.number.files - 1)) {
origFile <- paste(t.first.file + files.num, ".csv", sep = "")  # establish file name to process each file in dir
if (file.exists(origFile)){
print(paste("Processing",origFile," to ", new.dir))
# call function to extact data from file
r.frame1 <- ExtractOneFile(origFile, t.table.number)   #variables: file, rows to skip, rows to process
} else {
next
}
RESULTS[,8] <- c(l)
#print(r.frame1)
## determine if combined frame exists - should not for first file - create if not, join with existing frame if so
#if (exists("r.frame") ) {
#  r.frame <- join_frames( r.frame, r.frame1)
#  print("r.frame exists, doing join")
#} else {
#  r.frame <- r.frame1
#}
}
#df.save <- as.data.frame(t(r.frame))  # transpose frame from columns of data to rows of data
#add column names
#colnames(df.save) <- c("OriginalLocationID","LocationID","Datetime",toString(t.label))
#df.save <- subset(df.save, select = -c(drop))  # remove the filler column (was a row) we needed to add above
# create a results filename, use the direcory name/table name in the file name and label of sample type
#file.name <- paste("Table",t.table.number,"_", toString(t.label), "_mod.csv", sep = "")  # use the direcory name/table name in the file name
# write the results out to a file, from processing one or more files to a single csv file with linear usable data
#write.table(df.save, file = file.name,
#            append = FALSE, quote = TRUE, sep = ",",
#            eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE,
#            qmethod = c("escape", "double"), fileEncoding = "")
}
##MAIN SCRIPT##
## SET Root Working Directory for project:
wd <- "~/Documents/MysticProject/testbed/WQ7981/"
scriptsLoc <- paste(wd,"scripts/", sep = "")
##Establish list of station/Location names and replacements so they can changed, from file
LocationNameChange.File <- paste(scriptsLoc,"LocationChangeData.csv", sep = "")
df.LocationNameChange <- read.table (file = LocationNameChange.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Establish list of Table names and relevant table info from file
Table.NameInfo.File <- paste(scriptsLoc,"TableNamesInfo.csv", sep ="")
df.Table <- read.table (file = Table.NameInfo.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Set Location of Table 2 for writting
Table.2 <- paste(wd,"/TABLE 2/RESULTS.csv", sep ="")
df.t2  <-  read.table (file = Table.2, header = TRUE, sep = ",", skip=0, na.strings = c(""))
RESULTS <- df.t2
l <- vector(mode="character", length=nrow(RESULTS))
#process the tables
for (t.num in 3:3) {   # process a range of tables
table.number <- t.num
label <- df.Table[t.num,2]  #lable of sample type eg. total Coliform etc.
first.file <- df.Table[t.num,3] + 2
number.files <- df.Table[t.num+1,3] - df.Table[t.num,3]
#print(label)
#print(first.file)
#print(number.files)
ProcessOneTable(table.number,
number.files ,
label ,
first.file)
}
View(RESULTS)
L
l
RESULTS[,8] <- c(l)
View(RESULTS)
## Mystic River Watershed Association
##  WQ7981  - Mystic River Water Quality Data Report 1979, 1980, 1981
## Project to convert data from to a usable format
##  Peter Olsen April, 2015
## This script was used to transpose tables 3 - 33 of the Report
##
require(stringr)
require(lubridate)
#setwd("/Users/Peter/Documents/MysticProject/testbed/DataProjectPDFtoUsableTables/TABLE 3")
rm(list=ls())   # remove all variables in Enviornment
## Function ##
## Requires station(location) name from data and a data frame with replacement station names paired with
## station names from report tables
StationNameChange <- function(st.name,df.stnames){
for (reportRow in 1:nrow(df.stnames)){
if (df.stnames[reportRow,1] == st.name) {
return( df.stnames[reportRow,2])
}
}
stop(paste("missing", st.name))  ## if no match found stops the program
}
writeToResults <- function (f.stationName, f.date, f.data ) {
#logic flaw - l is rewritten each time a value is presented- vector only has one value
#l <- vector(mode="character", length=nrow(df.t2))
for (row in 2:nrow(df.t2)){
#if ((stationNameC == df.t2[row,2])  && (surveyDate == df.t2[row,3])){
if ((f.stationName == df.t2[row,2]) && (toString(mdy(f.date))
== toString(df.t2[row,3]))){
print("BINGO!!!!!")
print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
df.t2[row,8] <- toString(f.data)
#l[row] <-  f.data
return(row)
} else {
#l<- c(l, "NA")
}
#print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
#print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
#stop("toCheck")
}
#print(l)
}
#Fuction to Extact data from one file from a Table
ExtractOneFile <- function (origFile,t.num) {
origData <- read.table (file = origFile, header = FALSE, sep = ",", skip=4, na.strings = c(""))
print(origData)
results.col <- as.integer(1)  # establish a varaible to keep track of columns in results frame
#l <- vector(mode="character", length=nrow(df.t2))
for (table.row in 2:nrow(origData)) {           # assign row  (was 2,37, 4)
for (table.col in 2:ncol(origData)){          # assign collum   ## 8 should be table width ncol(origData) #for (table.col in 2:8){
stationName <- toString(origData[table.row,1])
if ((toString(origData[table.row,table.col]) == "NA")|| (stationName == "NA")) {   # skip lines with no data
next
}
# check if station name is O.K
if (!(grepl("[A-Z]{2,3}[0-9]{2}[A]{0,1}$",stationName))) {
#if (grepl("A",st.name)) {
stop(paste("Bad Station Name: table:",origFile,"value:",stationName))
}
stationNameC <- toString(StationNameChange(stationName, df.LocationNameChange))  #change location/station names
surveyDate <- toString(origData[1,table.col])
#print(paste("date: ",surveyDate,"column:",table.col,"row:",table.row))
surveyData <- toString(origData[table.row,table.col])
if ((stationNameC =="NA") || (surveyDate == "NA") || ( surveyData =="NA")){
next   #skip lines with NA values
}
#write to results table
line.num <- writeToResults(stationNameC, surveyDate, surveyData)
l[line.num] <- surveyData
#print(paste("t2 station",df.t2[row,2], as.Date(df.t2[row,3], format = "%m/%d/%y")))
#print(paste("date: ",surveyDate,
#           mdy(surveyDate),
#            "Station Name:",stationNameC,"data:",surveyData,"row:",row))
}    #end for col
} # end for row
#return(results.frame)
#print(l)
} # end function
##FUNCTION TO PROCESS ONE TABLE##
ProcessOneTable <- function ( t.table.number ,
t.number.files,
t.label,
t.first.file ){
new.dir <- paste(wd,"TABLE ",t.table.number, sep = "")
print(paste(new.dir,"/",t.first.file,".csv",sep=""))
#l <- vector(mode="character", length=nrow(df.t2))
if (file.exists(paste(new.dir,"/",t.first.file,".csv",sep=""))){
setwd(new.dir)
} else {
print("stop")
return()
}
## extract data from all the files in a table directory and combine them into one data frame
for (files.num in 0:(t.number.files - 1)) {
origFile <- paste(t.first.file + files.num, ".csv", sep = "")  # establish file name to process each file in dir
if (file.exists(origFile)){
print(paste("Processing",origFile," to ", new.dir))
# call function to extact data from file
r.frame1 <- ExtractOneFile(origFile, t.table.number)   #variables: file, rows to skip, rows to process
} else {
next
}
RESULTS[,8] <- c(l)
#print(r.frame1)
## determine if combined frame exists - should not for first file - create if not, join with existing frame if so
#if (exists("r.frame") ) {
#  r.frame <- join_frames( r.frame, r.frame1)
#  print("r.frame exists, doing join")
#} else {
#  r.frame <- r.frame1
#}
}
#df.save <- as.data.frame(t(r.frame))  # transpose frame from columns of data to rows of data
#add column names
#colnames(df.save) <- c("OriginalLocationID","LocationID","Datetime",toString(t.label))
#df.save <- subset(df.save, select = -c(drop))  # remove the filler column (was a row) we needed to add above
# create a results filename, use the direcory name/table name in the file name and label of sample type
#file.name <- paste("Table",t.table.number,"_", toString(t.label), "_mod.csv", sep = "")  # use the direcory name/table name in the file name
# write the results out to a file, from processing one or more files to a single csv file with linear usable data
#write.table(df.save, file = file.name,
#            append = FALSE, quote = TRUE, sep = ",",
#            eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE,
#            qmethod = c("escape", "double"), fileEncoding = "")
}
##MAIN SCRIPT##
## SET Root Working Directory for project:
wd <- "~/Documents/MysticProject/testbed/WQ7981/"
scriptsLoc <- paste(wd,"scripts/", sep = "")
##Establish list of station/Location names and replacements so they can changed, from file
LocationNameChange.File <- paste(scriptsLoc,"LocationChangeData.csv", sep = "")
df.LocationNameChange <- read.table (file = LocationNameChange.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Establish list of Table names and relevant table info from file
Table.NameInfo.File <- paste(scriptsLoc,"TableNamesInfo.csv", sep ="")
df.Table <- read.table (file = Table.NameInfo.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Set Location of Table 2 for writting
Table.2 <- paste(wd,"/TABLE 2/RESULTS.csv", sep ="")
df.t2  <-  read.table (file = Table.2, header = TRUE, sep = ",", skip=0, na.strings = c(""))
RESULTS <- df.t2
l <- vector(mode="character", length=nrow(RESULTS))
#process the tables
for (t.num in 3:3) {   # process a range of tables
table.number <- t.num
label <- df.Table[t.num,2]  #lable of sample type eg. total Coliform etc.
first.file <- df.Table[t.num,3] + 2
number.files <- df.Table[t.num+1,3] - df.Table[t.num,3]
#print(label)
#print(first.file)
#print(number.files)
ProcessOneTable(table.number,
number.files ,
label ,
first.file)
}
View(RESULTS)
## Mystic River Watershed Association
##  WQ7981  - Mystic River Water Quality Data Report 1979, 1980, 1981
## Project to convert data from to a usable format
##  Peter Olsen April, 2015
## This script was used to transpose tables 3 - 33 of the Report
##
require(stringr)
require(lubridate)
#setwd("/Users/Peter/Documents/MysticProject/testbed/DataProjectPDFtoUsableTables/TABLE 3")
rm(list=ls())   # remove all variables in Enviornment
## Function ##
## Requires station(location) name from data and a data frame with replacement station names paired with
## station names from report tables
StationNameChange <- function(st.name,df.stnames){
for (reportRow in 1:nrow(df.stnames)){
if (df.stnames[reportRow,1] == st.name) {
return( df.stnames[reportRow,2])
}
}
stop(paste("missing", st.name))  ## if no match found stops the program
}
writeToResults <- function (f.stationName, f.date, f.data ) {
#logic flaw - l is rewritten each time a value is presented- vector only has one value
#l <- vector(mode="character", length=nrow(df.t2))
for (row in 2:nrow(df.t2)){
#if ((stationNameC == df.t2[row,2])  && (surveyDate == df.t2[row,3])){
if ((f.stationName == df.t2[row,2]) && (toString(mdy(f.date))
== toString(df.t2[row,3]))){
print("BINGO!!!!!")
print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
df.t2[row,8] <- toString(f.data)
#l[row] <-  f.data
return(row)
} else {
#l<- c(l, "NA")
}
#print(paste("t2 station",df.t2[row,2],toString(df.t2[row,3])))
#print(paste("New table - date: ",toString(mdy(f.date)),"Station Name:",f.stationName,"data:",f.data,"row:",row))
#stop("toCheck")
}
#print(l)
}
#Fuction to Extact data from one file from a Table
ExtractOneFile <- function (origFile,t.num) {
origData <- read.table (file = origFile, header = FALSE, sep = ",", skip=4, na.strings = c(""))
print(origData)
results.col <- as.integer(1)  # establish a varaible to keep track of columns in results frame
#l <- vector(mode="character", length=nrow(df.t2))
for (table.row in 2:nrow(origData)) {           # assign row  (was 2,37, 4)
for (table.col in 2:ncol(origData)){          # assign collum   ## 8 should be table width ncol(origData) #for (table.col in 2:8){
stationName <- toString(origData[table.row,1])
if ((toString(origData[table.row,table.col]) == "NA")|| (stationName == "NA")) {   # skip lines with no data
next
}
# check if station name is O.K
if (!(grepl("[A-Z]{2,3}[0-9]{2}[A]{0,1}$",stationName))) {
#if (grepl("A",st.name)) {
stop(paste("Bad Station Name: table:",origFile,"value:",stationName))
}
stationNameC <- toString(StationNameChange(stationName, df.LocationNameChange))  #change location/station names
surveyDate <- toString(origData[1,table.col])
#print(paste("date: ",surveyDate,"column:",table.col,"row:",table.row))
surveyData <- toString(origData[table.row,table.col])
if ((stationNameC =="NA") || (surveyDate == "NA") || ( surveyData =="NA")){
next   #skip lines with NA values
}
#write to results table
line.num <- writeToResults(stationNameC, surveyDate, surveyData)
l[line.num] <- surveyData
#print(paste("t2 station",df.t2[row,2], as.Date(df.t2[row,3], format = "%m/%d/%y")))
#print(paste("date: ",surveyDate,
#           mdy(surveyDate),
#            "Station Name:",stationNameC,"data:",surveyData,"row:",row))
}    #end for col
} # end for row
#return(results.frame)
#print(l)
} # end function
##FUNCTION TO PROCESS ONE TABLE##
ProcessOneTable <- function ( t.table.number ,
t.number.files,
t.label,
t.first.file ){
new.dir <- paste(wd,"TABLE ",t.table.number, sep = "")
print(paste(new.dir,"/",t.first.file,".csv",sep=""))
#l <- vector(mode="character", length=nrow(df.t2))
print(paste("l",l))
if (file.exists(paste(new.dir,"/",t.first.file,".csv",sep=""))){
setwd(new.dir)
} else {
print("stop")
return()
}
## extract data from all the files in a table directory and combine them into one data frame
for (files.num in 0:(t.number.files - 1)) {
origFile <- paste(t.first.file + files.num, ".csv", sep = "")  # establish file name to process each file in dir
if (file.exists(origFile)){
print(paste("Processing",origFile," to ", new.dir))
# call function to extact data from file
r.frame1 <- ExtractOneFile(origFile, t.table.number)   #variables: file, rows to skip, rows to process
} else {
next
}
RESULTS[,8] <- c(l)
#print(r.frame1)
## determine if combined frame exists - should not for first file - create if not, join with existing frame if so
#if (exists("r.frame") ) {
#  r.frame <- join_frames( r.frame, r.frame1)
#  print("r.frame exists, doing join")
#} else {
#  r.frame <- r.frame1
#}
}
#df.save <- as.data.frame(t(r.frame))  # transpose frame from columns of data to rows of data
#add column names
#colnames(df.save) <- c("OriginalLocationID","LocationID","Datetime",toString(t.label))
#df.save <- subset(df.save, select = -c(drop))  # remove the filler column (was a row) we needed to add above
# create a results filename, use the direcory name/table name in the file name and label of sample type
#file.name <- paste("Table",t.table.number,"_", toString(t.label), "_mod.csv", sep = "")  # use the direcory name/table name in the file name
# write the results out to a file, from processing one or more files to a single csv file with linear usable data
#write.table(df.save, file = file.name,
#            append = FALSE, quote = TRUE, sep = ",",
#            eol = "\n", na = "NA", dec = ".", row.names = FALSE, col.names = TRUE,
#            qmethod = c("escape", "double"), fileEncoding = "")
}
##MAIN SCRIPT##
## SET Root Working Directory for project:
wd <- "~/Documents/MysticProject/testbed/WQ7981/"
scriptsLoc <- paste(wd,"scripts/", sep = "")
##Establish list of station/Location names and replacements so they can changed, from file
LocationNameChange.File <- paste(scriptsLoc,"LocationChangeData.csv", sep = "")
df.LocationNameChange <- read.table (file = LocationNameChange.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Establish list of Table names and relevant table info from file
Table.NameInfo.File <- paste(scriptsLoc,"TableNamesInfo.csv", sep ="")
df.Table <- read.table (file = Table.NameInfo.File, header = FALSE, sep = ",", skip=1, na.strings = c(""))
## Set Location of Table 2 for writting
Table.2 <- paste(wd,"/TABLE 2/RESULTS.csv", sep ="")
df.t2  <-  read.table (file = Table.2, header = TRUE, sep = ",", skip=0, na.strings = c(""))
RESULTS <- df.t2
l <- vector(mode="character", length=nrow(RESULTS))
#process the tables
for (t.num in 3:3) {   # process a range of tables
table.number <- t.num
label <- df.Table[t.num,2]  #lable of sample type eg. total Coliform etc.
first.file <- df.Table[t.num,3] + 2
number.files <- df.Table[t.num+1,3] - df.Table[t.num,3]
#print(label)
#print(first.file)
#print(number.files)
ProcessOneTable(table.number,
number.files ,
label ,
first.file)
}
l
source('~/Documents/MysticProject/testbed/WQ7981/scripts/TransposeT3_T111.R')
