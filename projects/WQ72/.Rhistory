d[ind]<- NA
d
d[ind]
ind
ind <- which(d$steps %in% sample(d$steps, 4))
d$steps[ind]<- NA
d
d1 <- d %>% group_by(intervals) %>%
summarise_each(funs(sum))
d1
d1 <- d1[complete.cases(d1),]
d1 <- d %>% group_by(intervals) %>%
summarise_each(funs(sum))
d1
d <- data.frame(intervals, steps)
ind <- which(d$steps %in% sample(d$steps, 4))
d$steps[ind]<- NA
d1 <- d1[complete.cases(d1),]
d1 <- d %>% group_by(intervals) %>%
summarise_each(funs(sum))
d1
d
d <- data.frame(intervals, steps)
ind <- which(d$steps %in% sample(d$steps, 4))
d$steps[ind]<- NA
d1 <- d[complete.cases(d),]
d1
d1 <- d %>% group_by(intervals) %>%
summarise_each(funs(sum))
d1
d1 <- d[complete.cases(d),]
d2 <- d1 %>% group_by(intervals) %>%
summarise_each(funs(sum))
d2
d2 <- d1 %>% group_by(intervals) %>%
summarise_each(funs(mean))
d2
d
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d2, ~ intervals, transform, steps = impute(steps, mean))
library(dplr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d2, ~ intervals, transform, steps = impute(steps, mean))
library(ddplr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d2, ~ intervals, transform, steps = impute(steps, mean))
library(dplr)
library(plyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d2, ~ intervals, transform, steps = impute(steps, mean))
d3
d <- data.frame(intervals, steps)
ind <- which(d$steps %in% sample(d$steps, 4))
d$steps[ind]<- NA
d1 <- d[complete.cases(d),]
d2 <- d1 %>% group_by(intervals) %>%
summarise_each(funs(mean))
##http://www.mail-archive.com/r-help@r-project.org/msg58289.html
##From Hadley Wickham
library(plyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d, ~ intervals, transform, steps = impute(steps, mean))
d
d3
d3
d2
d
load data and libraries
```{r, echo = TRUE, results = "hide", warnings = FALSE, message= FALSE, errors=FALSE}
setwd("~/Documents/datasciencecoursera/ReproducibleResearch/")
d <- read.csv("data/activity.csv")
library(dplyr)
library(lubridate)
library(ggplot2)
```
sum and histogram
```{r}
#Calulate the sum by date
ds <- d %>% group_by(date) %>%
summarise_each(funs(sum))
##Plot a histogram
qplot(steps, data=ds, geom="histogram")
```
Calculate the Mean:
```{r}
##dmean <- d %>% group_by(date) %>%
##        summarise_each(funs(mean))
##qplot(steps, data = dmean, geom = "histogram", binwidth = 1)
dmean <- mean(ds$steps, na.rm = TRUE)
```
The mean of the sum of steps per day is `r dmean`.
Calculate the median:
```{r}
##dmedian <- d %>% group_by(date) %>%
##        summarise_each(funs(median))
##qplot(steps, data = dmedian, geom = "histogram", binwidth = 1)
dmedian <- median(ds$steps, na.rm = TRUE)
```
The median of the sum of steps per day is `r dmedian`.
next
```{r}
d2 <- d[,c("interval", "steps")]
d2 <- d2[complete.cases(d2),]
ts <- d2 %>% group_by(interval) %>%
summarise_each(funs(mean))
g <- ggplot(ts, aes(interval, steps))
g + geom_line()
#qplot(interval, data = ts, geom = "line")
```
```{r}
#is na
sna <- sum(is.na(d$steps))
mna <- mean(is.na(d$steps))
```
Total NA's in the data is `r sna`. The proportion of missing values is `r mna`.
```{r}
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d, ~ intervals, transform, steps = impute(steps, mean))
# approach for filling in NA's
#x[is.na(x)] =median(x, na.rm=TRUE)  # but use the median of x's where interval is the same
```
head(d)
library(dplyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d4 <- group_by(intervals) %>%
transform(funs(mean))
d4 <- d %>% group_by(intervals) %>%
transform(funs(mean))
library(dplyr)
intervals <- c(1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4)
steps <- sample(16)
d <- data.frame(intervals, steps)
ind <- which(d$steps %in% sample(d$steps, 4))
d$steps[ind]<- NA
d1 <- d[complete.cases(d),]
#calculate means for each interval by using non NA values
d2 <- d1 %>% group_by(intervals) %>%
summarise_each(funs(mean))
## using this fucntion fill in NA values with means of existing values by interval
##http://www.mail-archive.com/r-help@r-project.org/msg58289.html
##From Hadley Wickham
library(plyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d, ~ intervals, transform, steps = impute(steps, mean))
library(dplyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d4 <- d %>% group_by(intervals) %>%
transform(funs(mean))
#ddply(df, ~ group, transform, traits = impute(traits, median))
#ddply(df, ~ group, transform, traits = impute(traits, min))
d4
d4 <- d %>% group_by(intervals) %>%
transform(funs(impute(steps, mean))))
d4 <- d %>% group_by(intervals) %>%
transform(funs(impute(steps, mean)))
d4
d3
d4 <- d %>% group_by(intervals) %>%
transform(impute(steps, mean))
d4
library(dplyr)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d4 <- d %>% group_by(intervals) %>%
transform(impute(steps, mean))
d4
d4 <- d %>% group_by(intervals) %>%
impute(steps, mean)
d4 <- d %>% group_by(intervals) %>%
transform(impute(steps, mean))
d4
d
setwd("~/Documents/datasciencecoursera/ReproducibleResearch/")
d <- read.csv("data/activity.csv")
library(dplyr)
library(plyr)
library(lubridate)
library(ggplot2)
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
d3 <- ddply(d, ~ interval, transform, steps = impute(steps, mean))
d3
head(d3)
head(d)
head(d3,100)
head(d,100)
d[interval == 0]
d[interval == 0,]
d[,interval == 0]
d[,"interval" == 0]
d["interval" == 0,]
d[d$interval == 0,]
head(d[d$interval == 0,])
head(d3[d3$interval == 0,])
head(d3[d3$interval == 5,])
head(d[d$interval == 5,])
impute <- function(x, fun) {
missing <- is.na(x)
replace(x, missing, fun(x[!missing]))
}
di <- ddply(d, ~ interval, transform, steps = impute(steps, mean))
#Calulate the sum by date
dsi <- di %>% group_by(date) %>%
summarise_each(funs(sum))
##Plot a histogram
qplot(steps, data=dsi, geom="histogram")
qplot(steps, data=dsi, geom="histogram, binwidth = 2")
qplot(steps, data=dsi, geom="histogram", binwidth = 2)
qplot(steps, data=dsi, geom="histogram", binwidth = 1)
qplot(steps, data=dsi, geom="histogram")
qplot(steps, data=dsi, geom="histogram", binwidth = 10)
qplot(steps, data=dsi, geom="histogram")
dmean <- mean(ds$steps, na.rm = TRUE)
dmeani <- mean(dsi$steps, na.rm = TRUE)
dmean
demeani
dmeani
dmean <- mean(d$steps, na.rm = TRUE)
dmeani <- mean(di$steps, na.rm = TRUE)
dmean
dmeani
sum(is.na(di$steps))
sum(is.na(d$steps))
mean(is.na(d$steps))
mean(is.na(di$steps))
d2 <- d[,c("interval", "steps")]
d2 <- d2[complete.cases(d2),]
ts <- d2 %>% group_by(interval) %>%
summarise_each(funs(mean))
ts
which.max(ts$steps)
ts[which.max(ts$steps),]
head(ts, 105)
ts[100:110,]
ts[which.max(ts$steps),][1]
ts[which.max(ts$steps),]["interval"]
dw$dayType <- factor(c("Weekend","Weekday"))
dw <- di
dw$dayType <- factor(c("Weekend","Weekday"))
head(dw)
weeks(dw$date[1])
weekdays(dw$date[1])
str(dw)
weekdays(as.date(dw$date[1])
)
weekdays(as.Date(dw$date[1]))
?weekdays
dw$dayType <- ifelse(weekdays(as.Date(dw$date[1])) %in% c("Sunday","Saturday"), "Weekday", "Weekend")
dw$dayType
str(dw$dayType)
dw$dayType <- ifelse(weekdays(as.Date(dw$date)) %in% c("Sunday","Saturday"), "Weekday", "Weekend")
str
str(dw$dayType)
head(dw)
dw <- di
dw$dayType <- factor(c("Weekend","Weekday"))
dw$dayType <- ifelse(weekdays(as.Date(dw$date)) %in% c("Sunday","Saturday"), "Weekend", "Weekday")
head(dw)
str(dw)
dw[, 'dayType'] <- as.factor(dw[, 'dayType'])
str(dw)
dwg <- dw %>% group_by(interval) %>%
summarise_all(funs(mean))
dwg <- dw %>% group_by(interval) %>%
summarise_each(funs(mean))
dwg
dwg <- dw %>% group_by(interval) %>%
summarise(funs(mean))
dwg
dwg <- dw %>% group_by(interval, steps) %>%
summarise(funs(mean))
dwg
dwg <- dw %>% group_by(interval, steps) %>%
summarise_one(funs(mean))
dwg <- dw %>% group_by(dayType, interval) %>%
summarise_each(funs(mean))
dw
dwg
ggplot(dwg, aes(interval,steps))+geom_line(color="aquamarine4")+facet_wrap(~dayType, nrow=2)
install.packages("knitr")
library(knit2html())
library(knitr)
pwd
getwd()
knitr2html(proj1.Rmd)
knit2html(proj1.Rmd)
?knit2html
knit2html("proj1.Rmd")
getwd()
knit2html("proj1.Rmd")
x <- seq(-4, 4, length = 100)
x
y_1 <- dt(x, 4)
y_2 <- dt(x, 6)
y_3 <- dt(x, 8)
y_4 <- dt(x, 10)
y_5 <- dt(x, 12)
y_1
y_2
plot(x, y_1, type = "l", lwd = 2, xlab = "T value", ylab = "Density", main = "Comparison of t-distributions")
lines(x, y_2,  col = "red")
lines(x, y_3, col = "orange")
lines(x, y_4, col = "green")
lines(x, y_5, col = "blue")
# Add a legend
legend("topright", c("df = 4", "df = 6", "df = 8", "df = 10", "df = 12"), title = "T distributions", col = c("black", "red", "orange", "green", "blue"), lty = 1)
wd <- "~/Documents/MyRWA/projects/ExploreWQ7981/"
#scriptsLoc <- paste(wd,"scripts/analyze/", sep = "")
dataLoc <- paste(wd,"data/", sep = "")
#resultsLoc <- paste(wd,"results/", sep = "")
setwd(wd)
site.data <- paste(dataLoc,"siteData.csv", sep = "")
d <- read.csv(site.data)
#list of database names of locations sampled in report
reportLocations <- c("AJ01",
"ABRN01",
"ABR070",
"HAB001",
"ABR049",
"ABR036",
"ABR028",
"ABR017",
"ABR006",
"ABR001",
"UPL001",
"MYR071",
"MIB001",
"MWRA070",
"MWRA172",
"MWRA061",
"MYR39",
"MAR036",
"MWRA059","HAB0015",
"HAB002",
"SWBB",
"HOB103",
"SHBTRIB","CUBLEX",
"HBT01",
"HBT02",
"HBT03",
"HBT05",
"HBT06",
"HBT07",
"HBT08")
d <- subset(d, d$LocationID %in% reportLocations)
# get just useful columns
d <- select(d, one_of("CharacteristicID","ResultValue","Units","LocationID","Datetime"))
dim(d)
head(d)
str(d)
cat <- sapply(d, is.factor)
d[cat] <- lapply(d[cat], factor)
table(d$LocationID, d$CharacteristicID)
str(d)
dFcoli <- subset(d, d$LocationID == "MWRA070", d$ChracteristicID == "FCOLI")
head(dFcoli)
dFcoli <- subset(d, d$LocationID == "MWRA070" & d$ChracteristicID == "FCOLI")
head(dFcoli)
str(d)
d[d$CharacteristicID == "FCOLI"]
d[,d$CharacteristicID == "FCOLI"]
d[,CharacteristicID == "FCOLI"]
d[,d$CharacteristicID == "FCOLI"]
d$CharacteristicID == "FCOLI"
d[d$CharacteristicID == "FCOLI",]
head(d[d$CharacteristicID == "FCOLI",])
head(d[d$CharacteristicID == "FCOLI" & d$LocationID == "MWRA070",])
dFcoli <- subset(d, d$LocationID == "MWRA070" & d$ChracteristicID == "FCOLI")
head(dFcoli)
dFcoli <- d[d$CharacteristicID == "FCOLI" & d$LocationID == "MWRA070",]
head(dFcoli)
dFcoli <- subset(d, d$CharacteristicID == "FCOLI" & d$LocationID == "MWRA070")
head(dFcoli)
g <- ggplot(dFcoli, aes(ResultValue, Datetime))
ggplot2
library(ggplot2)
g <- ggplot(dFcoli, aes(ResultValue, Datetime))
g <- ggplot(dFcoli, aes(Datetime, ResultValue))
g + geom_lines()
g <- ggplot(dFcoli, aes(Datetime, ResultValue))
g + geom_line()
year(dFcoli$Datetime)
library(lubridate)
year(dFcoli$Datetime)
head(dFcoli)
year(strptime(dFcoli$Datetime, "%m/%d/%Y %H:%M")
)
mutate(dFcoli,
year =  year(strptime(dFcoli$Datetime, "%m/%d/%Y %H:%M"))
)
library(dplyr)
mutate(dFcoli,
year =  year(strptime(dFcoli$Datetime, "%m/%d/%Y %H:%M"))
)
head(dFcoli)
dFcoli <-
mutate(dFcoli,
year =  year(strptime(dFcoli$Datetime, "%m/%d/%Y %H:%M"))
)
head(dFcoli)
g <- ggplot(dFcoli, aes(year, ResultValue))
g + geom_line()
g <- ggplot(dFcoli, aes(year, ResultValue))
g + geom_line() + lm()
g <- ggplot(dFcoli, aes(year, ResultValue))
g + geom_point()
g <- ggplot(dFcoli, aes(year, ResultValue))
g + geom_point() + geom_smooth(method = "lm")
summary(dFcoli)
summary(dFcoli$ResultValue)
summarize(dFcoli$ResultValue)
summarise(dFcoli$ResultValue)
summary(dFcoli$ResultValue)
allFcoli <- subset(d, d$CharacteristicID == "FCOLI")
## add a year column to look at data by year
library(lubridate)
library(dplyr)
allFcoli <-
mutate(dFcoli,
year =  year(strptime(allFcoli$Datetime, "%m/%d/%Y %H:%M"))
)
summary(allFcoli$ResultValue)
g <- ggplot(allFcoli, aes(year, ResultValue))
g + geom_point() + geom_smooth(method = "lm")
allg <- ggplot(allFcoli, aes(year, ResultValue))
allg + geom_point() + geom_smooth(method = "lm")
allFcoli <- subset(d, d$CharacteristicID == "FCOLI")
## add a year column to look at data by year
library(lubridate)
library(dplyr)
allFcoli <-
mutate(allFcoli,
year =  year(strptime(allFcoli$Datetime, "%m/%d/%Y %H:%M"))
)
summary(allFcoli$ResultValue)
allg <- ggplot(allFcoli, aes(year, ResultValue))
allg + geom_point() + geom_smooth(method = "lm")
fit <- lm(year ~ ResultValue, data=allFcoli)
summary(fit)
rm(list=ls())   # Clean: remove all variables in Enviornment
##load libraries
library(ggplot2)
library(plyr)
library(dplyr)
##Set working directories
wd <- "~/Documents/MyRWA/projects/WQ72/"
data <- read.csv("WQ72")
wd <- "~/Documents/MyRWA/projects/WQ72/"
data <- read.csv("WQ72.csv")
getwd()
wd <- "~/Documents/MyRWA/projects/WQ72/"
setwd(wd)
data <- read.csv("WQ72.csv")
rm(list=ls())   # Clean: remove all variables in Enviornment
##load libraries
library(ggplot2)
library(plyr)
library(dplyr)
##Set working directories
wd <- "~/Documents/MyRWA/projects/WQ72/"
##scriptsLoc <- paste(wd,"scripts/analyze/", sep = "")
##dataLoc <- paste(wd,"data/", sep = "")
setwd(wd)
raw <- read.csv("WQ72.csv")
View(raw)
?read.csv
raw <- read.csv("WQ72.csv", header=FALSE)
rm(list=ls())   # Clean: remove all variables in Enviornment
##load libraries
library(ggplot2)
library(plyr)
library(dplyr)
##Set working directories
wd <- "~/Documents/MyRWA/projects/WQ72/"
##scriptsLoc <- paste(wd,"scripts/analyze/", sep = "")
##dataLoc <- paste(wd,"data/", sep = "")
setwd(wd)
raw <- read.csv("WQ72.csv", header=FALSE)
View(raw)
myTable = data.frame()
edit(myTable)
